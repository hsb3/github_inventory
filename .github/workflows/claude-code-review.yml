name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    paths:
      - "src/**/*.py"
      - "tests/**/*.py"
      - "pyproject.toml"
      - "Makefile"
      - ".pre-commit-config.yaml"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Review this Python CLI tool pull request focusing on:
            - Code quality following PEP 8 and project conventions
            - Proper use of type hints and mypy compliance
            - Test coverage for new functionality
            - Security considerations for CLI input handling
            - Performance implications for GitHub API calls
            - Proper error handling and user feedback
            - Documentation updates if needed

            CRITICAL TEST REVIEW REQUIREMENTS:
            - Verify that ALL tests pass by running the test suite
            - Check if function signature changes require test updates
            - Ensure mocks and test expectations match actual function signatures
            - If any tests fail, the PR should be marked as needing fixes
            - Look for missing test coverage on new or modified functionality

            Run make test (or pytest tests/ -v) and make lint to verify code quality.
            Be constructive and suggest specific improvements.

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true

          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality

          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}

          # Optional: Add specific tools for running tests or linting
          allowed_tools: "Bash(make test),Bash(make lint),Bash(make typecheck),Bash(pytest tests/ -v),Bash(ruff check src/),Bash(mypy src/),Bash(grep *),Bash(find *),Bash(uv run pytest *),Bash(make hooks)"

          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')
