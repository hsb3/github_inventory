#!/usr/bin/env python3
"""Optimized codebase analyzer - maximum report quality per line of code."""

import subprocess
import json
import sys
from pathlib import Path

def generate_comprehensive_report(target_path, output_dir="analysis_output"):
    """Generate comprehensive analysis report using high-leverage tools."""
    target = Path(target_path)
    output = Path(output_dir)
    output.mkdir(exist_ok=True)

    print(f"🔍 Analyzing {target.name}...")

    # 1. Static analysis aggregation (12 tools in one)
    print("📊 Running comprehensive static analysis...")
    subprocess.run([
        "prospector", "--output-format=json",
        f"--output-file={output}/analysis.json", str(target)
    ], capture_output=True)

    # 2. Generate UML class diagrams
    print("🎨 Generating UML diagrams...")
    subprocess.run([
        "pyreverse", "-o", "png", "-p", target.name,
        "-d", str(output), str(target)
    ], capture_output=True)

    # 3. Complexity metrics (multiple metrics in one)
    print("📈 Analyzing code complexity...")
    subprocess.run([
        "radon", "cc", "--json", str(target)
    ], stdout=open(output / "complexity.json", "w"), stderr=subprocess.DEVNULL)

    # 4. Dependency analysis with conflict detection
    print("🔗 Analyzing dependencies...")
    subprocess.run([
        "pipdeptree", "--json-tree"
    ], stdout=open(output / "dependencies.json", "w"), stderr=subprocess.DEVNULL)

    # 5. Generate markdown report combining all data
    print("📝 Generating comprehensive report...")
    generate_markdown_report(target.name, output)

    print(f"✅ Complete analysis saved to {output}/")
    print(f"📖 View report: {output}/comprehensive_report.md")

def generate_markdown_report(project_name, output_dir):
    """Combine all analysis data into comprehensive markdown report."""
    output_dir = Path(output_dir)

    # Read analysis data
    analysis_data = {}
    for file in ["analysis.json", "complexity.json", "dependencies.json"]:
        try:
            with open(output_dir / file) as f:
                analysis_data[file] = json.load(f)
        except:
            analysis_data[file] = {}

    # Generate comprehensive report
    with open(output_dir / "comprehensive_report.md", "w") as f:
        f.write(f"# 📋 Comprehensive Analysis: {project_name}\n\n")
        f.write(f"*Generated by optimized analyzer • {len(open(__file__).readlines())} lines of code*\n\n")

        # UML diagrams (if generated)
        diagrams = list(output_dir.glob("*.png"))
        if diagrams:
            f.write("## 🎨 Architecture Overview\n\n")
            for diagram in diagrams:
                f.write(f"![{diagram.stem}]({diagram.name})\n\n")

        # Static analysis summary
        if analysis_data.get("analysis.json"):
            analysis = analysis_data["analysis.json"]
            f.write("## 📊 Code Quality Analysis\n\n")
            if "summary" in analysis:
                summary = analysis["summary"]
                f.write(f"**Overall Score:** {summary.get('score', 'N/A')}/10\n\n")

            # Messages by category
            if "messages" in analysis:
                categories = {}
                for msg in analysis["messages"][:20]:  # Top 20 issues
                    cat = msg.get("type", "unknown")
                    if cat not in categories:
                        categories[cat] = []
                    categories[cat].append(msg)

                for category, msgs in categories.items():
                    f.write(f"### {category.title()} Issues ({len(msgs)})\n\n")
                    for msg in msgs[:5]:  # Top 5 per category
                        f.write(f"- **{msg.get('symbol', 'N/A')}**: {msg.get('message', 'N/A')} "
                               f"({msg.get('location', {}).get('path', 'Unknown')}:{msg.get('location', {}).get('line', '?')})\n")
                    f.write("\n")

        # Complexity analysis
        if analysis_data.get("complexity.json"):
            f.write("## 📈 Complexity Metrics\n\n")
            complexity = analysis_data["complexity.json"]
            total_functions = sum(len(file_data) for file_data in complexity.values())
            f.write(f"**Total Functions Analyzed:** {total_functions}\n\n")

            # Most complex functions
            all_functions = []
            for filepath, functions in complexity.items():
                for func in functions:
                    func['file'] = filepath
                    all_functions.append(func)

            complex_functions = sorted(all_functions, key=lambda x: x.get('complexity', 0), reverse=True)[:10]
            if complex_functions:
                f.write("### 🔥 Most Complex Functions\n\n")
                for func in complex_functions:
                    f.write(f"- **{func.get('name', 'N/A')}** "
                           f"(Complexity: {func.get('complexity', 'N/A')}) "
                           f"in {func.get('file', 'Unknown')}\n")
                f.write("\n")

        # Dependencies
        if analysis_data.get("dependencies.json"):
            f.write("## 🔗 Dependency Analysis\n\n")
            deps = analysis_data["dependencies.json"]
            if isinstance(deps, list) and deps:
                f.write(f"**Total Dependencies:** {len(deps)}\n\n")
                f.write("### Top Dependencies\n\n")
                for dep in deps[:10]:
                    pkg_name = dep.get("package_name", "Unknown")
                    version = dep.get("installed_version", "N/A")
                    f.write(f"- **{pkg_name}** ({version})\n")
                f.write("\n")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python optimized_analyzer.py <target_directory>")
        sys.exit(1)
    generate_comprehensive_report(sys.argv[1])
