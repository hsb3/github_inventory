#!/usr/bin/env python3
"""Maximum leverage analyzer - comprehensive reports in 49 lines."""
import subprocess, json, sys
from pathlib import Path

def analyze(target):
    """Generate comprehensive analysis leveraging existing tools."""
    t = Path(target)
    o = Path(f"report_{t.name}")
    o.mkdir(exist_ok=True)

    print(f"🔍 Analyzing {t.name} with maximum leverage...")

    # Prospector: 12 static analysis tools in one command
    subprocess.run(["prospector", "--output-format=json", f"--output-file={o}/data.json", str(t)], capture_output=True)

    # Pyreverse: UML diagrams
    subprocess.run(["pyreverse", "-o", "png", "-p", t.name, "-d", str(o), str(t)], capture_output=True)

    # Radon: Complexity metrics
    subprocess.run(["radon", "cc", "--json", str(t)], stdout=open(o/"complexity.json", "w"), stderr=subprocess.DEVNULL)

    # Generate comprehensive report
    with open(o/"comprehensive_report.md", "w") as f:
        f.write(f"# 📋 {t.name} - Comprehensive Analysis\n*Generated by 49-line analyzer using Prospector + Pyreverse + Radon*\n\n")

        # UML Architecture
        diagrams = list(o.glob("*.png"))
        if diagrams:
            f.write("## 🏗️ Architecture Overview\n")
            for d in diagrams: f.write(f"![{d.stem}]({d.name})\n\n")

        # Quality Analysis (from 12 tools via Prospector)
        try:
            data = json.load(open(o/"data.json"))
            f.write(f"## 📊 Code Quality: {data.get('summary', {}).get('score', 'N/A')}/10\n\n")

            # Categorized issues
            issues = {}
            for msg in data.get("messages", [])[:25]:
                cat = msg.get("type", "other")
                if cat not in issues: issues[cat] = []
                issues[cat].append(f"**{msg.get('symbol')}**: {msg.get('message', '')[:80]}...")

            for category, msgs in issues.items():
                f.write(f"### {category.title()} ({len(msgs)})\n")
                for msg in msgs[:8]: f.write(f"- {msg}\n")
                f.write("\n")
        except: f.write("## 📊 Analysis data unavailable\n\n")

        # Complexity Hot Spots
        try:
            complexity = json.load(open(o/"complexity.json"))
            funcs = [(f.get('name'), f.get('complexity'), path) for path, fs in complexity.items() for f in fs]
            hot = sorted(funcs, key=lambda x: x[1] or 0, reverse=True)[:15]

            f.write("## 🔥 Complexity Hot Spots\n")
            for name, comp, path in hot:
                f.write(f"- **{name}** ({comp}) in `{Path(path).name}`\n")
            f.write("\n")
        except: f.write("## 🔥 Complexity analysis unavailable\n\n")

        f.write("---\n*Report combines static analysis from Prospector (Pylint, Pyflakes, McCabe, Bandit, Mypy, etc.) + UML diagrams + complexity metrics*")

    print(f"✅ Report: {o}/comprehensive_report.md")
    return o

if __name__ == "__main__":
    if len(sys.argv) != 2: print("Usage: python max_leverage_analyzer.py <directory>"); sys.exit(1)
    analyze(sys.argv[1])
